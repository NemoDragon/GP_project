# Generated from grammar/GPlanguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,181,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,4,2,73,8,2,11,2,12,2,74,1,3,4,3,78,8,3,11,3,
        12,3,79,1,3,1,3,5,3,84,8,3,10,3,12,3,87,9,3,1,3,1,3,4,3,91,8,3,11,
        3,12,3,92,3,3,95,8,3,1,4,1,4,5,4,99,8,4,10,4,12,4,102,9,4,1,4,1,
        4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,170,8,29,10,29,
        12,29,173,9,29,1,30,4,30,176,8,30,11,30,12,30,177,1,30,1,30,0,0,
        31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,5,1,0,48,57,4,0,
        10,10,13,13,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,3,0,9,10,13,13,32,32,188,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,66,1,0,
        0,0,5,72,1,0,0,0,7,94,1,0,0,0,9,96,1,0,0,0,11,105,1,0,0,0,13,107,
        1,0,0,0,15,109,1,0,0,0,17,113,1,0,0,0,19,116,1,0,0,0,21,122,1,0,
        0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,0,29,130,1,0,0,0,
        31,132,1,0,0,0,33,134,1,0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,141,
        1,0,0,0,41,144,1,0,0,0,43,146,1,0,0,0,45,149,1,0,0,0,47,151,1,0,
        0,0,49,154,1,0,0,0,51,158,1,0,0,0,53,161,1,0,0,0,55,163,1,0,0,0,
        57,165,1,0,0,0,59,167,1,0,0,0,61,175,1,0,0,0,63,64,5,105,0,0,64,
        65,5,102,0,0,65,2,1,0,0,0,66,67,5,108,0,0,67,68,5,111,0,0,68,69,
        5,111,0,0,69,70,5,112,0,0,70,4,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,
        0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,6,1,0,0,0,76,78,7,
        0,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,
        81,1,0,0,0,81,85,5,46,0,0,82,84,7,0,0,0,83,82,1,0,0,0,84,87,1,0,
        0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,95,1,0,0,0,87,85,1,0,0,0,88,90,
        5,46,0,0,89,91,7,0,0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,
        92,93,1,0,0,0,93,95,1,0,0,0,94,77,1,0,0,0,94,88,1,0,0,0,95,8,1,0,
        0,0,96,100,5,34,0,0,97,99,8,1,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,
        98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,104,
        5,34,0,0,104,10,1,0,0,0,105,106,5,123,0,0,106,12,1,0,0,0,107,108,
        5,125,0,0,108,14,1,0,0,0,109,110,5,111,0,0,110,111,5,117,0,0,111,
        112,5,116,0,0,112,16,1,0,0,0,113,114,5,105,0,0,114,115,5,110,0,0,
        115,18,1,0,0,0,116,117,5,97,0,0,117,118,5,114,0,0,118,119,5,114,
        0,0,119,120,5,97,0,0,120,121,5,121,0,0,121,20,1,0,0,0,122,123,5,
        40,0,0,123,22,1,0,0,0,124,125,5,41,0,0,125,24,1,0,0,0,126,127,5,
        91,0,0,127,26,1,0,0,0,128,129,5,93,0,0,129,28,1,0,0,0,130,131,5,
        43,0,0,131,30,1,0,0,0,132,133,5,45,0,0,133,32,1,0,0,0,134,135,5,
        42,0,0,135,34,1,0,0,0,136,137,5,47,0,0,137,36,1,0,0,0,138,139,5,
        61,0,0,139,140,5,61,0,0,140,38,1,0,0,0,141,142,5,33,0,0,142,143,
        5,61,0,0,143,40,1,0,0,0,144,145,5,60,0,0,145,42,1,0,0,0,146,147,
        5,60,0,0,147,148,5,61,0,0,148,44,1,0,0,0,149,150,5,62,0,0,150,46,
        1,0,0,0,151,152,5,62,0,0,152,153,5,61,0,0,153,48,1,0,0,0,154,155,
        5,97,0,0,155,156,5,110,0,0,156,157,5,100,0,0,157,50,1,0,0,0,158,
        159,5,111,0,0,159,160,5,114,0,0,160,52,1,0,0,0,161,162,5,61,0,0,
        162,54,1,0,0,0,163,164,5,59,0,0,164,56,1,0,0,0,165,166,5,44,0,0,
        166,58,1,0,0,0,167,171,7,2,0,0,168,170,7,3,0,0,169,168,1,0,0,0,170,
        173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,60,1,0,0,0,173,171,
        1,0,0,0,174,176,7,4,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,
        1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,6,30,0,0,180,62,
        1,0,0,0,9,0,74,79,85,92,94,100,171,177,1,6,0,0
    ]

class GPlanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    LOOP = 2
    INTEGER_VALUE = 3
    FLOAT_VALUE = 4
    STRING_VALUE = 5
    BLOCK_START = 6
    BLOCK_END = 7
    OUT = 8
    IN = 9
    ARRAY = 10
    LPAREN = 11
    RPAREN = 12
    LSQUARE = 13
    RSQUARE = 14
    PLUS = 15
    MINUS = 16
    MULT = 17
    DIV = 18
    EQ = 19
    NEQ = 20
    LT = 21
    LTE = 22
    GT = 23
    GTE = 24
    AND = 25
    OR = 26
    ASSIGN = 27
    SEMI = 28
    COMMA = 29
    ID = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'loop'", "'{'", "'}'", "'out'", "'in'", "'array'", 
            "'('", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'='", 
            "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "IF", "LOOP", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
            "BLOCK_START", "BLOCK_END", "OUT", "IN", "ARRAY", "LPAREN", 
            "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", 
            "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "ASSIGN", 
            "SEMI", "COMMA", "ID", "WS" ]

    ruleNames = [ "IF", "LOOP", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
                  "BLOCK_START", "BLOCK_END", "OUT", "IN", "ARRAY", "LPAREN", 
                  "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", 
                  "DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", 
                  "ASSIGN", "SEMI", "COMMA", "ID", "WS" ]

    grammarFileName = "GPlanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


