# Generated from grammar/GPlanguage.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,175,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,4,2,71,8,2,11,2,12,2,72,1,3,4,3,76,8,3,11,3,12,3,77,1,
        3,1,3,5,3,82,8,3,10,3,12,3,85,9,3,1,3,1,3,4,3,89,8,3,11,3,12,3,90,
        3,3,93,8,3,1,4,1,4,5,4,97,8,4,10,4,12,4,100,9,4,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,5,28,164,8,28,10,28,12,28,167,9,28,1,29,4,29,
        170,8,29,11,29,12,29,171,1,29,1,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,1,0,5,1,0,48,57,3,0,10,10,13,13,34,34,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,182,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,
        0,0,3,64,1,0,0,0,5,70,1,0,0,0,7,92,1,0,0,0,9,94,1,0,0,0,11,103,1,
        0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,111,1,0,0,0,19,114,1,0,0,
        0,21,116,1,0,0,0,23,118,1,0,0,0,25,120,1,0,0,0,27,122,1,0,0,0,29,
        124,1,0,0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,130,1,0,0,0,37,133,
        1,0,0,0,39,136,1,0,0,0,41,138,1,0,0,0,43,141,1,0,0,0,45,143,1,0,
        0,0,47,146,1,0,0,0,49,150,1,0,0,0,51,153,1,0,0,0,53,157,1,0,0,0,
        55,159,1,0,0,0,57,161,1,0,0,0,59,169,1,0,0,0,61,62,5,105,0,0,62,
        63,5,102,0,0,63,2,1,0,0,0,64,65,5,108,0,0,65,66,5,111,0,0,66,67,
        5,111,0,0,67,68,5,112,0,0,68,4,1,0,0,0,69,71,7,0,0,0,70,69,1,0,0,
        0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,6,1,0,0,0,74,76,7,
        0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,
        79,1,0,0,0,79,83,5,46,0,0,80,82,7,0,0,0,81,80,1,0,0,0,82,85,1,0,
        0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,93,1,0,0,0,85,83,1,0,0,0,86,88,
        5,46,0,0,87,89,7,0,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,
        90,91,1,0,0,0,91,93,1,0,0,0,92,75,1,0,0,0,92,86,1,0,0,0,93,8,1,0,
        0,0,94,98,5,34,0,0,95,97,8,1,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,
        96,1,0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,
        34,0,0,102,10,1,0,0,0,103,104,5,123,0,0,104,12,1,0,0,0,105,106,5,
        125,0,0,106,14,1,0,0,0,107,108,5,111,0,0,108,109,5,117,0,0,109,110,
        5,116,0,0,110,16,1,0,0,0,111,112,5,105,0,0,112,113,5,110,0,0,113,
        18,1,0,0,0,114,115,5,40,0,0,115,20,1,0,0,0,116,117,5,41,0,0,117,
        22,1,0,0,0,118,119,5,91,0,0,119,24,1,0,0,0,120,121,5,93,0,0,121,
        26,1,0,0,0,122,123,5,43,0,0,123,28,1,0,0,0,124,125,5,45,0,0,125,
        30,1,0,0,0,126,127,5,42,0,0,127,32,1,0,0,0,128,129,5,47,0,0,129,
        34,1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,132,36,1,0,0,0,133,
        134,5,33,0,0,134,135,5,61,0,0,135,38,1,0,0,0,136,137,5,60,0,0,137,
        40,1,0,0,0,138,139,5,60,0,0,139,140,5,61,0,0,140,42,1,0,0,0,141,
        142,5,62,0,0,142,44,1,0,0,0,143,144,5,62,0,0,144,145,5,61,0,0,145,
        46,1,0,0,0,146,147,5,97,0,0,147,148,5,110,0,0,148,149,5,100,0,0,
        149,48,1,0,0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,50,1,0,0,
        0,153,154,5,110,0,0,154,155,5,111,0,0,155,156,5,116,0,0,156,52,1,
        0,0,0,157,158,5,61,0,0,158,54,1,0,0,0,159,160,5,59,0,0,160,56,1,
        0,0,0,161,165,7,2,0,0,162,164,7,3,0,0,163,162,1,0,0,0,164,167,1,
        0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,58,1,0,0,0,167,165,1,0,
        0,0,168,170,7,4,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,
        0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,174,6,29,0,0,174,60,1,0,
        0,0,9,0,72,77,83,90,92,98,165,171,1,6,0,0
    ]

class GPlanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    LOOP = 2
    INTEGER_VALUE = 3
    FLOAT_VALUE = 4
    STRING_VALUE = 5
    BLOCK_START = 6
    BLOCK_END = 7
    OUT = 8
    IN = 9
    LPAREN = 10
    RPAREN = 11
    LSQUARE = 12
    RSQUARE = 13
    PLUS = 14
    MINUS = 15
    MULT = 16
    DIV = 17
    EQ = 18
    NEQ = 19
    LT = 20
    LTE = 21
    GT = 22
    GTE = 23
    AND = 24
    OR = 25
    NOT = 26
    ASSIGN = 27
    SEMI = 28
    ID = 29
    WS = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'loop'", "'{'", "'}'", "'out'", "'in'", "'('", "')'", 
            "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<'", 
            "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "LOOP", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
            "BLOCK_START", "BLOCK_END", "OUT", "IN", "LPAREN", "RPAREN", 
            "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", "EQ", 
            "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
            "SEMI", "ID", "WS" ]

    ruleNames = [ "IF", "LOOP", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
                  "BLOCK_START", "BLOCK_END", "OUT", "IN", "LPAREN", "RPAREN", 
                  "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", 
                  "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", 
                  "ASSIGN", "SEMI", "ID", "WS" ]

    grammarFileName = "GPlanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


